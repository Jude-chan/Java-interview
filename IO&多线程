3. IO
3.1 介绍一下Java中的IO流
参考答案
IO（Input Output）用于实现对数据的输入与输出操作，Java把不同的输入/输出源（键盘、文件、网
络等）抽象表述为流（Stream）。流是从起源到接收的有序数据，有了它程序就可以采用同一方式访
问不同的输入/输出源。
按照数据流向，可以将流分为输入流和输出流，其中输入流只能读取数据、不能写入数据，而输出
流只能写入数据、不能读取数据。
按照数据类型，可以将流分为字节流和字符流，其中字节流操作的数据单元是8位的字节，而字符
流操作的数据单元是16位的字符。
按照处理功能，可以将流分为节点流和处理流，其中节点流可以直接从/向一个特定的IO设备（磁
盘、网络等）读/写数据，也称为低级流，而处理流是对节点流的连接或封装，用于简化数据读/写
功能或提高效率，也称为高级流。
Java提供了大量的类来支持IO操作，下表给大家整理了其中比较常用的一些类。其中，黑色字体的是抽
象基类，其他所有的类都继承自它们。红色字体的是节点流，蓝色字体的是处理流。
根据命名很容易理解各个流的作用：
以File开头的文件流用于访问文件；
以ByteArray/CharArray开头的流用于访问内存中的数组；
以Piped开头的管道流用于访问管道，实现进程之间的通信；
以String开头的流用于访问内存中的字符串；
以Buffered开头的缓冲流，用于在读写数据时对数据进行缓存，以减少IO次数；
InputStreamReader、InputStreamWriter是转换流，用于将字节流转换为字符流；
以Object开头的流是对象流，用于实现对象的序列化；
以Print开头的流是打印流，用于简化打印操作；
以Pushback开头的流是推回输入流，用于将已读入的数据推回到缓冲区，从而实现再次读取；
以Data开头的流是特殊流，用于读写Java基本类型的数据。
3.2 怎么用流打开一个大文件？
参考答案
打开大文件，应避免直接将文件中的数据全部读取到内存中，可以采用分次读取的方式。
1. 使用缓冲流。缓冲流内部维护了一个缓冲区，通过与缓冲区的交互，减少与设备的交互次数。使用
缓冲输入流时，它每次会读取一批数据将缓冲区填满，每次调用读取方法并不是直接从设备取值，
而是从缓冲区取值，当缓冲区为空时，它会再一次读取数据，将缓冲区填满。使用缓冲输出流时，
每次调用写入方法并不是直接写入到设备，而是写入缓冲区，当缓冲区填满时它会自动刷入设备。
2. 使用NIO。NIO采用内存映射文件的方式来处理输入/输出，NIO将文件或文件的一段区域映射到内
存中，这样就可以像访问内存一样来访问文件了（这种方式模拟了操作系统上的虚拟内存的概
念），通过这种方式来进行输入/输出比传统的输入/输出要快得多。
3.3 说说NIO的实现原理
参考答案
Java的NIO主要由三个核心部分组成：Channel、Buffer、Selector。
基本上，所有的IO在NIO中都从一个Channel开始，数据可以从Channel读到Buffer中，也可以从
Buffer写到Channel中。Channel有好几种类型，其中比较常用的有FileChannel、
DatagramChannel、SocketChannel、ServerSocketChannel等，这些通道涵盖了UDP和TCP网络IO以
及文件IO。
Buffer本质上是一块可以写入数据，然后可以从中读取数据的内存。这块内存被包装成NIO Buffer对
象，并提供了一组方法，用来方便的访问该块内存。Java NIO里关键的Buffer实现有CharBuffer、
ByteBuffer、ShortBuffer、IntBuffer、LongBuffer、FloatBuffer、DoubleBuffer。这些Buffer覆盖了
你能通过IO发送的基本数据类型，即byte、short、int、long、float、double、char。
Buffer对象包含三个重要的属性，分别是capacity、position、limit，其中position和limit的含义取决
于Buffer处在读模式还是写模式。但不管Buffer处在什么模式，capacity的含义总是一样的。
capacity：作为一个内存块，Buffer有个固定的最大值，就是capacity。Buffer只能写capacity个
数据，一旦Buffer满了，需要将其清空才能继续写数据往里写数据。
position：当写数据到Buffer中时，position表示当前的位置。初始的position值为0。当一个数据
写到Buffer后， position会向前移动到下一个可插入数据的Buffer单元。position最大可为
capacity–1。当读取数据时，也是从某个特定位置读。当将Buffer从写模式切换到读模式，
position会被重置为0。当从Buffer的position处读取数据时，position向前移动到下一个可读的位
置。
limit：在写模式下，Buffer的limit表示最多能往Buffer里写多少数据，此时limit等于capacity。当
切换Buffer到读模式时， limit表示你最多能读到多少数据，此时limit会被设置成写模式下的
position值。
三个属性之间的关系，如下图所示：
Selector允许单线程处理多个 Channel，如果你的应用打开了多个连接（通道），但每个连接的流量都
很低，使用Selector就会很方便。要使用Selector，得向Selector注册Channel，然后调用它的select()
方法。这个方法会一直阻塞到某个注册的通道有事件就绪。一旦这个方法返回，线程就可以处理这些事
件，事件例如有新连接进来，数据接收等。
这是在一个单线程中使用一个Selector处理3个Channel的图示：
扩展阅读
Java NIO根据操作系统不同， 针对NIO中的Selector有不同的实现：
macosx：KQueueSelectorProvider
solaris：DevPollSelectorProvider
Linux：EPollSelectorProvider (Linux kernels >= 2.6)或PollSelectorProvider
windows：WindowsSelectorProvider
所以不需要特别指定，Oracle JDK会自动选择合适的Selector。如果想设置特定的Selector，可以设置
属性，例如： -Djava.nio.channels.spi.SelectorProvider=sun.nio.ch.EPollSelectorProvider。
JDK在Linux已经默认使用epoll方式，但是JDK的epoll采用的是水平触发，所以Netty自4.0.16起, Netty
为Linux通过JNI的方式提供了native socket transport。Netty重新实现了epoll机制。
1. 采用边缘触发方式；
2. netty epoll transport暴露了更多的nio没有的配置参数，如 TCP_CORK, SO_REUSEADDR等等；
3. C代码，更少GC，更少synchronized。
3.4 介绍一下Java的序列化与反序列化
参考答案
序列化机制可以将对象转换成字节序列，这些字节序列可以保存在磁盘上，也可以在网络中传输，并允
许程序将这些字节序列再次恢复成原来的对象。其中，对象的序列化（Serialize），是指将一个Java对
象写入IO流中，对象的反序列化（Deserialize），则是指从IO流中恢复该Java对象。
若对象要支持序列化机制，则它的类需要实现Serializable接口，该接口是一个标记接口，它没有提供任
何方法，只是标明该类是可以序列化的，Java的很多类已经实现了Serializable接口，如包装类、
String、Date等。
若要实现序列化，则需要使用对象流ObjectInputStream和ObjectOutputStream。其中，在序列化时
需要调用ObjectOutputStream对象的writeObject()方法，以输出对象序列。在反序列化时需要调用
ObjectInputStream对象的readObject()方法，将对象序列恢复为对象。
3.5 Serializable接口为什么需要定义serialVersionUID变量？
参考答案
serialVersionUID代表序列化的版本，通过定义类的序列化版本，在反序列化时，只要对象中所存的版
本和当前类的版本一致，就允许做恢复数据的操作，否则将会抛出序列化版本不一致的错误。
如果不定义序列化版本，在反序列化时可能出现冲突的情况，例如：
1. 创建该类的实例，并将这个实例序列化，保存在磁盘上；
2. 升级这个类，例如增加、删除、修改这个类的成员变量；
3. 反序列化该类的实例，即从磁盘上恢复修改之前保存的数据。
在第3步恢复数据的时候，当前的类已经和序列化的数据的格式产生了冲突，可能会发生各种意想不到
的问题。增加了序列化版本之后，在这种情况下则可以抛出异常，以提示这种矛盾的存在，提高数据的
安全性。
3.6 除了Java自带的序列化之外，你还了解哪些序列化工具？
参考答案
JSON：目前使用比较频繁的格式化数据工具，简单直观，可读性好，有jackson，gson，fastjson
等等，比较优秀的JSON解析工具的表现还是比较好的，有些json解析工具甚至速度超过了一些二
进制的序列化方式。
Protobuf：一个用来序列化结构化数据的技术，支持多种语言诸如C++、Java以及Python语言，
可以使用该技术来持久化数据或者序列化成网络传输的数据。相比较一些其他的XML技术而言，该
技术的一个明显特点就是更加节省空间（以二进制流存储）、速度更快以及更加灵活。另外
Protobuf支持的数据类型相对较少，不支持常量类型。由于其设计的理念是纯粹的展现层协议
（Presentation Layer），目前并没有一个专门支持Protobuf的RPC框架。
Thrift：是Facebook开源提供的一个高性能，轻量级RPC服务框架，其产生正是为了满足当前大数
据量、分布式、跨语言、跨平台数据通讯的需求。 但是，Thrift并不仅仅是序列化协议，而是一个
RPC框架。 相对于JSON和XML而言，Thrift在空间开销和解析性能上有了比较大的提升，对于对性
能要求比较高的分布式系统，它是一个优秀的RPC解决方案。但是由于Thrift的序列化被嵌入到
Thrift框架里面， Thrift框架本身并没有透出序列化和反序列化接口，这导致其很难和其他传输层
协议共同使用（例如HTTP）。
Avro：提供两种序列化格式，即JSON格式或者Binary格式。Binary格式在空间开销和解析性能方
面可以和Protobuf媲美， JSON格式方便测试阶段的调试。 Avro支持的数据类型非常丰富，包括
C++语言里面的union类型。Avro支持JSON格式的IDL和类似于Thrift和Protobuf的IDL（实验阶
段），这两者之间可以互转。Schema可以在传输数据的同时发送，加上JSON的自我描述属性，
这使得Avro非常适合动态类型语言。 Avro在做文件持久化的时候，一般会和Schema一起存储，
所以Avro序列化文件自身具有自我描述属性，所以非常适合于做Hive、Pig和MapReduce的持久
化数据格式。对于不同版本的Schema，在进行RPC调用的时候，服务端和客户端可以在握手阶段
对Schema进行互相确认，大大提高了最终的数据解析速度。
3.7 如果不用JSON工具，该如何实现对实体类的序列化？
参考答案
可以使用Java原生的序列化机制，但是效率比较低一些，适合小项目；
可以使用其他的一些第三方类库，比如Protobuf、Thrift、Avro等。
4. 多线程
4.1 创建线程有哪几种方式？
参考答案
创建线程有三种方式，分别是继承Thread类、实现Runnable接口、实现Callable接口。
通过继承Thread类来创建并启动线程的步骤如下：
1. 定义Thread类的子类，并重写该类的run()方法，该run()方法将作为线程执行体。
2. 创建Thread子类的实例，即创建了线程对象。
3. 调用线程对象的start()方法来启动该线程。
通过实现Runnable接口来创建并启动线程的步骤如下：
1. 定义Runnable接口的实现类，并实现该接口的run()方法，该run()方法将作为线程执行体。
2. 创建Runnable实现类的实例，并将其作为Thread的target来创建Thread对象，Thread对象为线
程对象。
3. 调用线程对象的start()方法来启动该线程。
通过实现Callable接口来创建并启动线程的步骤如下：
1. 创建Callable接口的实现类，并实现call()方法，该call()方法将作为线程执行体，且该call()方法有
返回值。然后再创建Callable实现类的实例。
2. 使用FutureTask类来包装Callable对象，该FutureTask对象封装了该Callable对象的call()方法的返
回值。
3. 使用FutureTask对象作为Thread对象的target创建并启动新线程。
4. 调用FutureTask对象的get()方法来获得子线程执行结束后的返回值。
扩展阅读
通过继承Thread类、实现Runnable接口、实现Callable接口都可以实现多线程，不过实现Runnable接
口与实现Callable接口的方式基本相同，只是Callable接口里定义的方法有返回值，可以声明抛出异常
而已。因此可以将实现Runnable接口和实现Callable接口归为一种方式。
采用实现Runnable、Callable接口的方式创建多线程的优缺点：
线程类只是实现了Runnable接口或Callable接口，还可以继承其他类。
在这种方式下，多个线程可以共享同一个target对象，所以非常适合多个相同线程来处理同一份资
源的情况，从而可以将CPU、代码和数据分开，形成清晰的模型，较好地体现了面向对象的思想。
劣势是，编程稍稍复杂，如果需要访问当前线程，则必须使用Thread.currentThread()方法。
采用继承Thread类的方式创建多线程的优缺点：
劣势是，因为线程类已经继承了Thread类，所以不能再继承其他父类。
优势是，编写简单，如果需要访问当前线程，则无须使用Thread.currentThread()方法，直接使用
this即可获得当前线程。
鉴于上面分析，因此一般推荐采用实现Runnable接口、Callable接口的方式来创建多线程。
4.2 说说Thread类的常用方法
参考答案
Thread类常用构造方法：
Thread()
Thread(String name)
Thread(Runnable target)
Thread(Runnable target, String name)
其中，参数 name为线程名，参数 target为包含线程体的目标对象。
Thread类常用静态方法：
currentThread()：返回当前正在执行的线程；
interrupted()：返回当前执行的线程是否已经被中断；
sleep(long millis)：使当前执行的线程睡眠多少毫秒数；
yield()：使当前执行的线程自愿暂时放弃对处理器的使用权并允许其他线程执行；
Thread类常用实例方法：
getId()：返回该线程的id；
getName()：返回该线程的名字；
getPriority()：返回该线程的优先级；
interrupt()：使该线程中断；
isInterrupted()：返回该线程是否被中断；
isAlive()：返回该线程是否处于活动状态；
isDaemon()：返回该线程是否是守护线程；
setDaemon(boolean on)：将该线程标记为守护线程或用户线程，如果不标记默认是非守护线
程；
setName(String name)：设置该线程的名字；
setPriority(int newPriority)：改变该线程的优先级；
join()：等待该线程终止；
join(long millis)：等待该线程终止,至多等待多少毫秒数。
4.3 run()和start()有什么区别？
参考答案
run()方法被称为线程执行体，它的方法体代表了线程需要完成的任务，而start()方法用来启动线程。
调用start()方法启动线程时，系统会把该run()方法当成线程执行体来处理。但如果直接调用线程对象的
run()方法，则run()方法立即就会被执行，而且在run()方法返回之前其他线程无法并发执行。也就是
说，如果直接调用线程对象的run()方法，系统把线程对象当成一个普通对象，而run()方法也是一个普
通方法，而不是线程执行体。
4.4 线程是否可以重复启动，会有什么后果？
参考答案
只能对处于新建状态的线程调用start()方法，否则将引发IllegalThreadStateException异常。
扩展阅读
当程序使用new关键字创建了一个线程之后，该线程就处于新建状态，此时它和其他的Java对象一样，
仅仅由Java虚拟机为其分配内存，并初始化其成员变量的值。此时的线程对象没有表现出任何线程的动
态特征，程序也不会执行线程的线程执行体。
当线程对象调用了start()方法之后，该线程处于就绪状态，Java虚拟机会为其创建方法调用栈和程序计
数器，处于这个状态中的线程并没有开始运行，只是表示该线程可以运行了。至于该线程何时开始运
行，取决于JVM里线程调度器的调度。
4.5 介绍一下线程的生命周期
参考答案
在线程的生命周期中，它要经过新建（New）、就绪（Ready）、运行（Running）、阻塞
（Blocked）和死亡（Dead）5种状态。尤其是当线程启动以后，它不可能一直“霸占”着CPU独自运
行，所以CPU需要在多条线程之间切换，于是线程状态也会多次在运行、就绪之间切换。
当程序使用new关键字创建了一个线程之后，该线程就处于新建状态，此时它和其他的Java对象一样，
仅仅由Java虚拟机为其分配内存，并初始化其成员变量的值。此时的线程对象没有表现出任何线程的动
态特征，程序也不会执行线程的线程执行体。
当线程对象调用了start()方法之后，该线程处于就绪状态，Java虚拟机会为其创建方法调用栈和程序计
数器，处于这个状态中的线程并没有开始运行，只是表示该线程可以运行了。至于该线程何时开始运
行，取决于JVM里线程调度器的调度。
如果处于就绪状态的线程获得了CPU，开始执行run()方法的线程执行体，则该线程处于运行状态，如果
计算机只有一个CPU，那么在任何时刻只有一个线程处于运行状态。当然，在一个多处理器的机器上，
将会有多个线程并行执行；当线程数大于处理器数时，依然会存在多个线程在同一个CPU上轮换的现
象。
当一个线程开始运行后，它不可能一直处于运行状态，线程在运行过程中需要被中断，目的是使其他线
程获得执行的机会，线程调度的细节取决于底层平台所采用的策略。对于采用抢占式策略的系统而言，
系统会给每个可执行的线程一个小时间段来处理任务。当该时间段用完后，系统就会剥夺该线程所占用
的资源，让其他线程获得执行的机会。当发生如下情况时，线程将会进入阻塞状态：
线程调用sleep()方法主动放弃所占用的处理器资源。
线程调用了一个阻塞式IO方法，在该方法返回之前，该线程被阻塞。
线程试图获得一个同步监视器，但该同步监视器正被其他线程所持有。
线程在等待某个通知（notify）。
程序调用了线程的suspend()方法将该线程挂起。但这个方法容易导致死锁，所以应该尽量避免使
用该方法。
针对上面几种情况，当发生如下特定的情况时可以解除上面的阻塞，让该线程重新进入就绪状态：
调用sleep()方法的线程经过了指定时间。
线程调用的阻塞式IO方法已经返回。
线程成功地获得了试图取得的同步监视器。
线程正在等待某个通知时，其他线程发出了一个通知。
处于挂起状态的线程被调用了resume()恢复方法。
线程会以如下三种方式结束，结束后就处于死亡状态：
run()或call()方法执行完成，线程正常结束。
线程抛出一个未捕获的Exception或Error。
直接调用该线程的stop()方法来结束该线程，该方法容易导致死锁，通常不推荐使用。
扩展阅读
线程5种状态的转换关系，如下图所示：
4.6 如何实现线程同步？
参考答案
1. 同步方法
即有synchronized关键字修饰的方法，由于java的每个对象都有一个内置锁，当用此关键字修饰
方法时， 内置锁会保护整个方法。在调用该方法前，需要获得内置锁，否则就处于阻塞状态。需
要注意， synchronized关键字也可以修饰静态方法，此时如果调用该静态方法，将会锁住整个
类。
2. 同步代码块
即有synchronized关键字修饰的语句块，被该关键字修饰的语句块会自动被加上内置锁，从而实
现同步。需值得注意的是，同步是一种高开销的操作，因此应该尽量减少同步的内容。通常没有必
要同步整个方法，使用synchronized代码块同步关键代码即可。
3. ReentrantLock
Java 5新增了一个java.util.concurrent包来支持同步，其中ReentrantLock类是可重入、互斥、实
现了Lock接口的锁，它与使用synchronized方法和快具有相同的基本行为和语义，并且扩展了其
能力。需要注意的是，ReentrantLock还有一个可以创建公平锁的构造方法，但由于能大幅度降低
程序运行效率，因此不推荐使用。
4. volatile
volatile关键字为域变量的访问提供了一种免锁机制，使用volatile修饰域相当于告诉虚拟机该域可
能会被其他线程更新，因此每次使用该域就要重新计算，而不是使用寄存器中的值。需要注意的
是，volatile不会提供任何原子操作，它也不能用来修饰final类型的变量。
5. 原子变量
在java的util.concurrent.atomic包中提供了创建了原子类型变量的工具类，使用该类可以简化线
程同步。例如AtomicInteger 表可以用原子方式更新int的值，可用在应用程序中（如以原子方式
增加的计数器），但不能用于替换Integer。可扩展Number，允许那些处理机遇数字类的工具和
实用工具进行统一访问。
4.7 说一说Java多线程之间的通信方式
参考答案
在Java中线程通信主要有以下三种方式：
1. wait()、notify()、notifyAll()
如果线程之间采用synchronized来保证线程安全，则可以利用wait()、notify()、notifyAll()来实现
线程通信。这三个方法都不是Thread类中所声明的方法，而是Object类中声明的方法。原因是每
个对象都拥有锁，所以让当前线程等待某个对象的锁，当然应该通过这个对象来操作。并且因为当
前线程可能会等待多个线程的锁，如果通过线程来操作，就非常复杂了。另外，这三个方法都是本
地方法，并且被final修饰，无法被重写。
wait()方法可以让当前线程释放对象锁并进入阻塞状态。notify()方法用于唤醒一个正在等待相应对
象锁的线程，使其进入就绪队列，以便在当前线程释放锁后竞争锁，进而得到CPU的执行。
notifyAll()用于唤醒所有正在等待相应对象锁的线程，使它们进入就绪队列，以便在当前线程释放
锁后竞争锁，进而得到CPU的执行。
每个锁对象都有两个队列，一个是就绪队列，一个是阻塞队列。就绪队列存储了已就绪（将要竞争
锁）的线程，阻塞队列存储了被阻塞的线程。当一个阻塞线程被唤醒后，才会进入就绪队列，进而
等待CPU的调度。反之，当一个线程被wait后，就会进入阻塞队列，等待被唤醒。
2. await()、signal()、signalAll()
如果线程之间采用Lock来保证线程安全，则可以利用await()、signal()、signalAll()来实现线程通
信。这三个方法都是Condition接口中的方法，该接口是在Java 1.5中出现的，它用来替代传统的
wait+notify实现线程间的协作，它的使用依赖于 Lock。相比使用wait+notify，使用Condition的
await+signal这种方式能够更加安全和高效地实现线程间协作。
Condition依赖于Lock接口，生成一个Condition的基本代码是lock.newCondition() 。 必须要注意
的是，Condition 的 await()/signal()/signalAll() 使用都必须在lock保护之内，也就是说，必须在
lock.lock()和lock.unlock之间才可以使用。事实上，await()/signal()/signalAll() 与
wait()/notify()/notifyAll()有着天然的对应关系。即：Conditon中的await()对应Object的wait()，
Condition中的signal()对应Object的notify()，Condition中的signalAll()对应Object的notifyAll()。
3. BlockingQueue
Java 5提供了一个BlockingQueue接口，虽然BlockingQueue也是Queue的子接口，但它的主要用
途并不是作为容器，而是作为线程通信的工具。BlockingQueue具有一个特征：当生产者线程试
图向BlockingQueue中放入元素时，如果该队列已满，则该线程被阻塞；当消费者线程试图从
BlockingQueue中取出元素时，如果该队列已空，则该线程被阻塞。
程序的两个线程通过交替向BlockingQueue中放入元素、取出元素，即可很好地控制线程的通
信。线程之间需要通信，最经典的场景就是生产者与消费者模型，而BlockingQueue就是针对该
模型提供的解决方案。
4.8 说一说Java同步机制中的wait和notify
参考答案
wait()、notify()、notifyAll()用来实现线程之间的通信，这三个方法都不是Thread类中所声明的方法，
而是Object类中声明的方法。原因是每个对象都拥有锁，所以让当前线程等待某个对象的锁，当然应该
通过这个对象来操作。并且因为当前线程可能会等待多个线程的锁，如果通过线程来操作，就非常复杂
了。另外，这三个方法都是本地方法，并且被final修饰，无法被重写，并且只有采用synchronized实现
线程同步时才能使用这三个方法。
wait()方法可以让当前线程释放对象锁并进入阻塞状态。notify()方法用于唤醒一个正在等待相应对象锁
的线程，使其进入就绪队列，以便在当前线程释放锁后竞争锁，进而得到CPU的执行。notifyAll()方法
用于唤醒所有正在等待相应对象锁的线程，使它们进入就绪队列，以便在当前线程释放锁后竞争锁，进
而得到CPU的执行。
每个锁对象都有两个队列，一个是就绪队列，一个是阻塞队列。就绪队列存储了已就绪（将要竞争锁）
的线程，阻塞队列存储了被阻塞的线程。当一个阻塞线程被唤醒后，才会进入就绪队列，进而等待CPU
的调度。反之，当一个线程被wait后，就会进入阻塞队列，等待被唤醒。
4.9 说一说sleep()和wait()的区别
参考答案
1. sleep()是Thread类中的静态方法，而wait()是Object类中的成员方法；
2. sleep()可以在任何地方使用，而wait()只能在同步方法或同步代码块中使用；
3. sleep()不会释放锁，而wait()会释放锁，并需要通过notify()/notifyAll()重新获取锁。
4.10 说一说notify()、notifyAll()的区别
参考答案
notify()
用于唤醒一个正在等待相应对象锁的线程，使其进入就绪队列，以便在当前线程释放锁后竞争锁，
进而得到CPU的执行。
notifyAll()
用于唤醒所有正在等待相应对象锁的线程，使它们进入就绪队列，以便在当前线程释放锁后竞争
锁，进而得到CPU的执行。
4.11 如何实现子线程先执行，主线程再执行？
参考答案
启动子线程后，立即调用该线程的join()方法，则主线程必须等待子线程执行完成后再执行。
扩展阅读
Thread类提供了让一个线程等待另一个线程完成的方法——join()方法。当在某个程序执行流中调用其
他线程的join()方法时，调用线程将被阻塞，直到被join()方法加入的join线程执行完为止。
join()方法通常由使用线程的程序调用，以将大问题划分成许多小问题，每个小问题分配一个线程。当
所有的小问题都得到处理后，再调用主线程来进一步操作。
4.12 阻塞线程的方式有哪些？
参考答案
当发生如下情况时，线程将会进入阻塞状态：
线程调用sleep()方法主动放弃所占用的处理器资源；
线程调用了一个阻塞式IO方法，在该方法返回之前，该线程被阻塞；
线程试图获得一个同步监视器，但该同步监视器正被其他线程所持有；
线程在等待某个通知（notify）；
程序调用了线程的suspend()方法将该线程挂起，但这个方法容易导致死锁，所以应该尽量避免使
用该方法。
4.13 说一说synchronized与Lock的区别
参考答案
1. synchronized是Java关键字，在JVM层面实现加锁和解锁；Lock是一个接口，在代码层面实现加锁
和解锁。
2. synchronized可以用在代码块上、方法上；Lock只能写在代码里。
3. synchronized在代码执行完或出现异常时自动释放锁；Lock不会自动释放锁，需要在finally中显
示释放锁。
4. synchronized会导致线程拿不到锁一直等待；Lock可以设置获取锁失败的超时时间。
5. synchronized无法得知是否获取锁成功；Lock则可以通过tryLock得知加锁是否成功。
6. synchronized锁可重入、不可中断、非公平；Lock锁可重入、可中断、可公平/不公平，并可以细
分读写锁以提高效率。
4.14 说一说synchronized的底层实现原理
参考答案
一、synchronized作用在代码块时，它的底层是通过monitorenter、monitorexit指令来实现的。
monitorenter：
每个对象都是一个监视器锁（monitor），当monitor被占用时就会处于锁定状态，线程执行
monitorenter指令时尝试获取monitor的所有权，过程如下：
如果monitor的进入数为0，则该线程进入monitor，然后将进入数设置为1，该线程即为monitor
的所有者。如果线程已经占有该monitor，只是重新进入，则进入monitor的进入数加1。如果其
他线程已经占用了monitor，则该线程进入阻塞状态，直到monitor的进入数为0，再重新尝试获
取monitor的所有权。
monitorexit：
执行monitorexit的线程必须是objectref所对应的monitor持有者。指令执行时，monitor的进入
数减1，如果减1后进入数为0，那线程退出monitor，不再是这个monitor的所有者。其他被这个
monitor阻塞的线程可以尝试去获取这个monitor的所有权。
monitorexit指令出现了两次，第1次为同步正常退出释放锁，第2次为发生异步退出释放锁。
二、方法的同步并没有通过 monitorenter 和 monitorexit 指令来完成，不过相对于普通方法，其常量
池中多了 ACC_SYNCHRONIZED 标示符。JVM就是根据该标示符来实现方法的同步的：
当方法调用时，调用指令将会检查方法的 ACC_SYNCHRONIZED 访问标志是否被设置，如果设置了，
执行线程将先获取monitor，获取成功之后才能执行方法体，方法执行完后再释放monitor。在方法执
行期间，其他任何线程都无法再获得同一个monitor对象。
三、总结
两种同步方式本质上没有区别，只是方法的同步是一种隐式的方式来实现，无需通过字节码来完成。两
个指令的执行是JVM通过调用操作系统的互斥原语mutex来实现，被阻塞的线程会被挂起、等待重新调
度，会导致“用户态和内核态”两个态之间来回切换，对性能有较大影响。
4.15 synchronized可以修饰静态方法和静态代码块吗？
参考答案
synchronized可以修饰静态方法，但不能修饰静态代码块。
当修饰静态方法时，监视器锁（monitor）便是对象的Class实例，因为Class数据存在于永久代，因此
静态方法锁相当于该类的一个全局锁。
4.16 谈谈ReentrantLock的实现原理
参考答案
ReentrantLock 是基于 AQS 实现的， AQS 即 AbstractQueuedSynchronizer 的缩写，这个是个内部实
现了两个队列的抽象类，分别是同步队列和条件队列。其中同步队列是一个双向链表，里面储存的是处
于等待状态的线程，正在排队等待唤醒去获取锁，而条件队列是一个单向链表，里面储存的也是处于等
待状态的线程，只不过这些线程唤醒的结果是加入到了同步队列的队尾， AQS 所做的就是管理这两个队
列里面线程之间的等待状态-唤醒的工作。
在同步队列中，还存在 2 中模式，分别是独占模式和共享模式，这两种模式的区别就在于 AQS 在唤醒线
程节点的时候是不是传递唤醒，这两种模式分别对应独占锁和共享锁。
AQS 是一个抽象类，所以不能直接实例化，当我们需要实现一个自定义锁的时候可以去继承 AQS 然后重
写获取锁的方式和释放锁的方式还有管理state，而 ReentrantLock 就是通过重写了 AQS 的
tryAcquire 和 tryRelease 方法实现的 lock 和 unlock 。
ReentrantLock 结构如下图所示：
首先 ReentrantLock 实现了  Lock 接口，然后有 3 个内部类，其中 Sync 内部类继承自 AQS ，另外的
两个内部类继承自 Sync ，这两个类分别是用来公平锁和非公平锁的。通过 Sync 重写的方法
tryAcquire 、 tryRelease 可以知道， ReentrantLock 实现的是 AQS 的独占模式，也就是独占锁，
这个锁是悲观锁。
4.17 如果不使用synchronized和Lock，如何保证线程安全？
参考答案
1. volatile
volatile关键字为域变量的访问提供了一种免锁机制，使用volatile修饰域相当于告诉虚拟机该域可
能会被其他线程更新，因此每次使用该域就要重新计算，而不是使用寄存器中的值。需要注意的
是，volatile不会提供任何原子操作，它也不能用来修饰final类型的变量。
2. 原子变量
在java的util.concurrent.atomic包中提供了创建了原子类型变量的工具类，使用该类可以简化线
程同步。例如AtomicInteger 表可以用原子方式更新int的值，可用在应用程序中（如以原子方式
增加的计数器），但不能用于替换Integer。可扩展Number，允许那些处理机遇数字类的工具和
实用工具进行统一访问。
3. 本地存储
可以通过ThreadLocal类来实现线程本地存储的功能。每一个线程的Thread对象中都有一个
ThreadLocalMap对象，这个对象存储了一组以ThreadLocal.threadLocalHashCode为键，以本
地线程变量为值的K-V值对，ThreadLocal对象就是当前线程的ThreadLocalMap的访问入口，每一
个ThreadLocal对象都包含了一个独一无二的threadLocalHashCode值，使用这个值就可以在线程
K-V值对中找回对应的本地线程变量。
4. 不可变的
只要一个不可变的对象被正确地构建出来，那其外部的可见状态永远都不会改变，永远都不会看到
它在多个线程之中处于不一致的状态，“不可变”带来的安全性是最直接、最纯粹的。Java语言中，
如果多线程共享的数据是一个基本数据类型，那么只要在定义时使用final关键字修饰它就可以保
证它是不可变的。如果共享数据是一个对象，由于Java语言目前暂时还没有提供值类型的支持，那
就需要对象自行保证其行为不会对其状态产生任何影响才行。String类是一个典型的不可变类，可
以参考它设计一个不可变类。
4.18 说一说Java中乐观锁和悲观锁的区别
参考答案
悲观锁：总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会
上锁，这样别人想拿这个数据就会阻塞直到它拿到锁。Java中悲观锁是通过synchronized关键字或Lock
接口来实现的。
乐观锁：顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更
新的时候会判断一下在此期间别人有没有去更新这个数据。乐观锁适用于多读的应用类型，这样可以提
高吞吐量。在JDK1.5 中新增 java.util.concurrent (J.U.C)就是建立在CAS之上的。相对于对于
synchronized 这种阻塞算法，CAS是非阻塞算法的一种常见实现。所以J.U.C在性能上有了很大的提
升。
4.19 公平锁与非公平锁是怎么实现的？
参考答案
在Java中实现锁的方式有两种，一种是使用Java自带的关键字synchronized对相应的类或者方法以及代
码块进行加锁，另一种是ReentrantLock，前者只能是非公平锁，而后者是默认非公平但可实现公平的
一把锁。
ReentrantLock是基于其内部类FairSync(公平锁)和NonFairSync(非公平锁)实现的，并且它的实现依赖
于Java同步器框架AbstractQueuedSynchronizer（AQS），AQS使用一个整形的volatile变量state来维
护同步状态，这个volatile变量是实现ReentrantLock的关键。我们来看一下ReentrantLock的类图：
ReentrantLock 的公平锁和非公平锁都委托了  AbstractQueuedSynchronizer#acquire 去请求获
取。
tryAcquire 是一个抽象方法，是公平与非公平的实现原理所在。
addWaiter 是将当前线程结点加入等待队列之中。公平锁在锁释放后会严格按照等到队列去取后
续值，而非公平锁在对于新晋线程有很大优势。
acquireQueued 在多次循环中尝试获取到锁或者将当前线程阻塞。
selfInterrupt 如果线程在阻塞期间发生了中断，调用 Thread.currentThread().interrupt() 中断当
前线程。
公平锁和非公平锁在说的获取上都使用到了 volatile 关键字修饰的state字段， 这是保证多线程环境下
锁的获取与否的核心。但是当并发情况下多个线程都读取到  state == 0 时，则必须用到CAS技术，一
门CPU的原子锁技术，可通过CPU对共享变量加锁的形式，实现数据变更的原子操作。volatile 和 CAS
的结合是并发抢占的关键。
公平锁FairSync
公平锁的实现机理在于每次有线程来抢占锁的时候，都会检查一遍有没有等待队列，如果有， 当
前线程会执行如下步骤：
其中hasQueuedPredecessors是用于检查是否有等待队列的：
public final void acquire(int arg) {
  if (!tryAcquire(arg) &&
    acquireQueued(addWaiter(Node.EXCLUSIVE), arg))
    selfInterrupt();
}
if (!hasQueuedPredecessors() && compareAndSetState(0, acquires)) {
  setExclusiveOwnerThread(current);
  return true;
}
非公平锁NonfairSync
非公平锁在实现的时候多次强调随机抢占：
与公平锁的区别在于新晋获取锁的进程会有多次机会去抢占锁，被加入了等待队列后则跟公平锁没
有区别。
4.20 了解Java中的锁升级吗？
参考答案
JDK 1.6之前，synchronized 还是一个重量级锁，是一个效率比较低下的锁。但是在JDK 1.6后，JVM为
了提高锁的获取与释放效率对synchronized 进行了优化，引入了偏向锁和轻量级锁 ，从此以后锁的状
态就有了四种：无锁、偏向锁、轻量级锁、重量级锁。并且四种状态会随着竞争的情况逐渐升级，而且
是不可逆的过程，即不可降级，这四种锁的级别由低到高依次是：无锁、偏向锁，轻量级锁，重量级
锁。如下图所示：
1. 无锁
public final boolean hasQueuedPredecessors() {
  Node t = tail; // Read fields in reverse initialization order
  Node h = head;
  Node s;
  return h != t &&
   ((s = h.next) == null || s.thread != Thread.currentThread());
}
if (c == 0) {
if (compareAndSetState(0, acquires)) {
setExclusiveOwnerThread(current);
return true;
 }
}
无锁是指没有对资源进行锁定，所有的线程都能访问并修改同一个资源，但同时只有一个线程能修
改成功。无锁的特点是修改操作会在循环内进行，线程会不断的尝试修改共享资源。如果没有冲突
就修改成功并退出，否则就会继续循环尝试。如果有多个线程修改同一个值，必定会有一个线程能
修改成功，而其他修改失败的线程会不断重试直到修改成功。
2. 偏向锁
初次执行到synchronized代码块的时候，锁对象变成偏向锁（通过CAS修改对象头里的锁标志
位），字面意思是“偏向于第一个获得它的线程”的锁。执行完同步代码块后，线程并不会主动释放
偏向锁。当第二次到达同步代码块时，线程会判断此时持有锁的线程是否就是自己（持有锁的线程
ID也在对象头里），如果是则正常往下执行。由于之前没有释放锁，这里也就不需要重新加锁。
如果自始至终使用锁的线程只有一个，很明显偏向锁几乎没有额外开销，性能极高。
偏向锁是指当一段同步代码一直被同一个线程所访问时，即不存在多个线程的竞争时，那么该线程
在后续访问时便会自动获得锁，从而降低获取锁带来的消耗，即提高性能。
当一个线程访问同步代码块并获取锁时，会在 Mark Word 里存储锁偏向的线程 ID。在线程进入和
退出同步块时不再通过 CAS 操作来加锁和解锁，而是检测 Mark Word 里是否存储着指向当前线
程的偏向锁。轻量级锁的获取及释放依赖多次 CAS 原子指令，而偏向锁只需要在置换 ThreadID
的时候依赖一次 CAS 原子指令即可。
偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程是不会主动释放
偏向锁的。关于偏向锁的撤销，需要等待全局安全点，即在某个时间点上没有字节码正在执行时，
它会先暂停拥有偏向锁的线程，然后判断锁对象是否处于被锁定状态。如果线程不处于活动状态，
则将对象头设置成无锁状态，并撤销偏向锁，恢复到无锁（标志位为01）或轻量级锁（标志位为
00）的状态。
3. 轻量级锁
轻量级锁是指当锁是偏向锁的时候，却被另外的线程所访问，此时偏向锁就会升级为轻量级锁，其
他线程会通过自旋的形式尝试获取锁，线程不会阻塞，从而提高性能。
轻量级锁的获取主要由两种情况：
1. 当关闭偏向锁功能时；
2. 由于多个线程竞争偏向锁导致偏向锁升级为轻量级锁。
一旦有第二个线程加入锁竞争，偏向锁就升级为轻量级锁（自旋锁）。这里要明确一下什么是锁竞
争：如果多个线程轮流获取一个锁，但是每次获取锁的时候都很顺利，没有发生阻塞，那么就不存
在锁竞争。只有当某线程尝试获取锁的时候，发现该锁已经被占用，只能等待其释放，这才发生了
锁竞争。
在轻量级锁状态下继续锁竞争，没有抢到锁的线程将自旋，即不停地循环判断锁是否能够被成功获
取。获取锁的操作，其实就是通过CAS修改对象头里的锁标志位。先比较当前锁标志位是否为“释
放”，如果是则将其设置为“锁定”，比较并设置是原子性发生的。这就算抢到锁了，然后线程将当
前锁的持有者信息修改为自己。
长时间的自旋操作是非常消耗资源的，一个线程持有锁，其他线程就只能在原地空耗CPU，执行不
了任何有效的任务，这种现象叫做忙等（busy-waiting）。如果多个线程用一个锁，但是没有发生
锁竞争，或者发生了很轻微的锁竞争，那么synchronized就用轻量级锁，允许短时间的忙等现
象。这是一种折衷的想法，短时间的忙等，换取线程在用户态和内核态之间切换的开销。
4. 重量级锁
重量级锁显然，此忙等是有限度的（有个计数器记录自旋次数，默认允许循环10次，可以通过虚
拟机参数更改）。如果锁竞争情况严重，某个达到最大自旋次数的线程，会将轻量级锁升级为重量
级锁（依然是CAS修改锁标志位，但不修改持有锁的线程ID）。当后续线程尝试获取锁时，发现被
占用的锁是重量级锁，则直接将自己挂起（而不是忙等），等待将来被唤醒。
重量级锁是指当有一个线程获取锁之后，其余所有等待获取该锁的线程都会处于阻塞状态。简言
之，就是所有的控制权都交给了操作系统，由操作系统来负责线程间的调度和线程的状态变更。而
这样会出现频繁地对线程运行状态的切换，线程的挂起和唤醒，从而消耗大量的系统资。
扩展阅读
synchronized 用的锁是存在Java对象头里的，那么什么是对象头呢？我们以 Hotspot 虚拟机为例进行
说明，Hopspot 对象头主要包括两部分数据：Mark Word（标记字段） 和 Klass Pointer（类型指
针）。
Mark Word：默认存储对象的HashCode，分代年龄和锁标志位信息。这些信息都是与对象自身定
义无关的数据，所以Mark Word被设计成一个非固定的数据结构以便在极小的空间内存存储尽量
多的数据。它会根据对象的状态复用自己的存储空间，也就是在运行期间Mark Word里存储的数
据会随着锁标志位的变化而变化。
Klass Point：对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实
例。
那么，synchronized 具体是存在对象头哪里呢？答案是：存在锁对象的对象头的Mark Word中，那么
MarkWord在对象头中到底长什么样，它到底存储了什么呢？
在32位的虚拟机中：
在64位的虚拟机中：
下面我们以 32位虚拟机为例，来看一下其 Mark Word 的字节具体是如何分配的：
无锁 ：对象头开辟 25bit 的空间用来存储对象的 hashcode ，4bit 用于存放对象分代年龄，1bit
用来存放是否偏向锁的标识位，2bit 用来存放锁标识位为01。
偏向锁： 在偏向锁中划分更细，还是开辟 25bit 的空间，其中23bit 用来存放线程ID，2bit 用来存
放 Epoch，4bit 存放对象分代年龄，1bit 存放是否偏向锁标识， 0表示无锁，1表示偏向锁，锁的
标识位还是01。
轻量级锁：在轻量级锁中直接开辟 30bit 的空间存放指向栈中锁记录的指针，2bit 存放锁的标志
位，其标志位为00。
重量级锁： 在重量级锁中和轻量级锁一样，30bit 的空间用来存放指向重量级锁的指针，2bit 存放
锁的标识位，为11。
GC标记： 开辟30bit 的内存空间却没有占用，2bit 空间存放锁标志位为11。
其中无锁和偏向锁的锁标志位都是01，只是在前面的1bit区分了这是无锁状态还是偏向锁状态。关于内
存的分配，我们可以在git中openJDK中 markOop.hpp 可以看出：
age_bits： 就是我们说的分代回收的标识，占用4字节。
lock_bits： 是锁的标志位，占用2个字节。
biased_lock_bits： 是是否偏向锁的标识，占用1个字节。
max_hash_bits： 是针对无锁计算的hashcode 占用字节数量，如果是32位虚拟机，就是 32 - 4 -
2 -1 = 25 byte，如果是64 位虚拟机，64 - 4 - 2 - 1 = 57 byte，但是会有 25 字节未使用，所以64
位的 hashcode 占用 31 byte。
hash_bits： 是针对 64 位虚拟机来说，如果最大字节数大于 31，则取31，否则取真实的字节数。
cms_bits： 不是64位虚拟机就占用 0 byte，是64位就占用 1byte。
epoch_bits： 就是 epoch 所占用的字节大小，2字节。
4.21 如何实现互斥锁（mutex）？
参考答案
在Java里面，最基本的互斥同步手段就是synchronized关键字，这是一种块结构（Block Structured）
的同步语法。synchronized关键字经过Javac编译之后，会在同步块的前后分别形成monitorenter和
monitorexit这两个字节码指令。这两个字节码指令都需要一个reference类型的参数来指明要锁定和解
锁的对象。如果Java源码中的synchronized明确指定了对象参数，那就以这个对象的引用作为
reference。如果没有明确指定，那将根据synchronized修饰的方法类型（如实例方法或类方法），来
决定是取代码所在的对象实例还是取类型对应的Class对象来作为线程要持有的锁。
自JDK 5起，Java类库中新提供了java.util.concurrent包（J.U.C包），其中的
java.util.concurrent.locks.Lock接口便成了Java的另一种全新的互斥同步手段。基于Lock接口，用户能
够以非块结构（Non-Block Structured）来实现互斥同步，从而摆脱了语言特性的束缚，改为在类库层
面去实现同步，这也为日后扩展出不同调度算法、不同特征、不同性能、不同语义的各种锁提供了广阔
的空间。
4.22 分段锁是怎么实现的？
参考答案
在并发程序中，串行操作是会降低可伸缩性，并且上下文切换也会减低性能。在锁上发生竞争时将通水
导致这两种问题，使用独占锁时保护受限资源的时候，基本上是采用串行方式—-每次只能有一个线程
能访问它。所以对于可伸缩性来说最大的威胁就是独占锁。
我们一般有三种方式降低锁的竞争程度：
1. 减少锁的持有时间；
2. 降低锁的请求频率；
3. 使用带有协调机制的独占锁，这些机制允许更高的并发性。
public:
 // Constants
 enum { age_bits      = 4,
    lock_bits     = 2,
    biased_lock_bits  = 1,
    max_hash_bits   = BitsPerWord - age_bits - lock_bits -
biased_lock_bits,
    hash_bits     = max_hash_bits > 31 ? 31 : max_hash_bits,
    cms_bits      = LP64_ONLY(1) NOT_LP64(0),
    epoch_bits     = 2
};
在某些情况下我们可以将锁分解技术进一步扩展为一组独立对象上的锁进行分解，这称为分段锁。其实
说的简单一点就是：容器里有多把锁，每一把锁用于锁容器其中一部分数据，那么当多线程访问容器里
不同数据段的数据时，线程间就不会存在锁竞争，从而可以有效的提高并发访问效率，这就是
ConcurrentHashMap所使用的锁分段技术，首先将数据分成一段一段的存储，然后给每一段数据配一
把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问。
如下图，ConcurrentHashMap使用Segment数据结构，将数据分成一段一段的存储，然后给每一段数
据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问，能够
实现真正的并发访问。所以说，ConcurrentHashMap在并发情况下，不仅保证了线程安全，而且提高
了性能。
4.23 说说你对读写锁的了解
参考答案
与传统锁不同的是读写锁的规则是可以共享读，但只能一个写，总结起来为：读读不互斥、读写互斥、
写写互斥，而一般的独占锁是：读读互斥、读写互斥、写写互斥，而场景中往往读远远大于写，读写锁
就是为了这种优化而创建出来的一种机制。
注意是读远远大于写，一般情况下独占锁的效率低来源于高并发下对临界区的激烈竞争导致线程上下文
切换。因此当并发不是很高的情况下，读写锁由于需要额外维护读锁的状态，可能还不如独占锁的效率
高。因此需要根据实际情况选择使用。
在Java中 ReadWriteLock 的主要实现为 ReentrantReadWriteLock ，其提供了以下特性：
1. 公平性选择：支持公平与非公平（默认）的锁获取方式，吞吐量非公平优先于公平。
2. 可重入：读线程获取读锁之后可以再次获取读锁，写线程获取写锁之后可以再次获取写锁。
3. 可降级：写线程获取写锁之后，其还可以再次获取读锁，然后释放掉写锁，那么此时该线程是读锁
状态，也就是降级操作。
4.24 volatile关键字有什么用？
参考答案
当一个变量被定义成volatile之后，它将具备两项特性：
1. 保证可见性
当写一个volatile变量时，JMM会把该线程本地内存中的变量强制刷新到主内存中去，这个写会操
作会导致其他线程中的volatile变量缓存无效。
2. 禁止指令重排
使用volatile关键字修饰共享变量可以禁止指令重排序，volatile禁止指令重排序有一些规则：
当程序执行到volatile变量的读操作或者写操作时，在其前面的操作的更改肯定全部已经进
行，且结果已经对后面的操作可见，在其后面的操作肯定还没有进行；
在进行指令优化时，不能将对volatile变量访问的语句放在其后面执行，也不能把volatile变量
后面的语句放到其前面执行。
即执行到volatile变量时，其前面的所有语句都执行完，后面所有语句都未执行。且前面语句的结
果对volatile变量及其后面语句可见。
注意，虽然volatile能够保证可见性，但它不能保证原子性。volatile变量在各个线程的工作内存中是不
存在一致性问题的，但是Java里面的运算操作符并非原子操作，这导致volatile变量的运算在并发下一样
是不安全的。
4.25 谈谈volatile的实现原理
参考答案
volatile可以保证线程可见性且提供了一定的有序性，但是无法保证原子性。在JVM底层volatile是采用
“内存屏障”来实现的。观察加入volatile关键字和没有加入volatile关键字时所生成的汇编代码发现，加
入volatile关键字时，会多出一个lock前缀指令，lock前缀指令实际上相当于一个内存屏障，内存屏障会
提供3个功能：
1. 它确保指令重排序时不会把其后面的指令排到内存屏障之前的位置，也不会把前面的指令排到内存
屏障的后面；即在执行到内存屏障这句指令时，在它前面的操作已经全部完成；
2. 它会强制将对缓存的修改操作立即写入主存；
3. 如果是写操作，它会导致其他CPU中对应的缓存行无效。
4.26 说说你对JUC的了解
参考答案
JUC是java.util.concurrent的缩写，该包参考自EDU.oswego.cs.dl.util.concurrent，是JSR 166标准规范
的一个实现。JSR 166是一个关于Java并发编程的规范提案，在JDK中该规范由java.util.concurrent包实
现。即JUC是Java提供的并发包，其中包含了一些并发编程用到的基础组件。
JUC这个包下的类基本上包含了我们在并发编程时用到的一些工具，大致可以分为以下几类：
原子更新
Java从JDK1.5开始提供了java.util.concurrent.atomic包，方便程序员在多线程环 境下，无锁的进
行原子操作。在Atomic包里一共有12个类，四种原子更新方式，分别是原子更新基本类型，原子
更新 数组，原子更新引用和原子更新字段。
锁和条件变量
java.util.concurrent.locks包下包含了同步器的框架 AbstractQueuedSynchronizer，基于AQS构
建的Lock以及与Lock配合可以实现等待/通知模式的Condition。JUC 下的大多数工具类用到了
Lock和Condition来实现并发。
线程池
涉及到的类比如：Executor、Executors、ThreadPoolExector、 AbstractExecutorService、
Future、Callable、ScheduledThreadPoolExecutor等等。
阻塞队列
涉及到的类比如：ArrayBlockingQueue、LinkedBlockingQueue、PriorityBlockingQueue、
LinkedBlockingDeque等等。
并发容器
涉及到的类比如：ConcurrentHashMap、CopyOnWriteArrayList、ConcurrentLinkedQueue、
CopyOnWriteArraySet等等。
同步器
剩下的是一些在并发编程中时常会用到的工具类，主要用来协助线程同步。比如：
CountDownLatch、CyclicBarrier、Exchanger、Semaphore、FutureTask等等。
4.27 说说你对AQS的理解
参考答案
抽象队列同步器AbstractQueuedSynchronizer （以下都简称AQS），是用来构建锁或者其他同步组件
的骨架类，减少了各功能组件实现的代码量，也解决了在实现同步器时涉及的大量细节问题，例如等待
线程采用FIFO队列操作的顺序。在不同的同步器中还可以定义一些灵活的标准来判断某个线程是应该通
过还是等待。
AQS采用模板方法模式，在内部维护了n多的模板的方法的基础上，子类只需要实现特定的几个方法
（不是抽象方法！不是抽象方法！不是抽象方法！），就可以实现子类自己的需求。
基于AQS实现的组件，诸如：
ReentrantLock 可重入锁（支持公平和非公平的方式获取锁）；
Semaphore 计数信号量;
ReentrantReadWriteLock 读写锁。
扩展阅读
AQS内部维护了一个int成员变量来表示同步状态，通过内置的FIFO(first-in-first-out)同步队列来控制获
取共享资源的线程。
我们可以猜测出，AQS其实主要做了这么几件事情：
同步状态（state）的维护管理；
等待队列的维护管理；
线程的阻塞与唤醒。
通过AQS内部维护的int型的state，可以用于表示任意状态！
ReentrantLock用它来表示锁的持有者线程已经重复获取该锁的次数，而对于非锁的持有者线程来
说，如果state大于0，意味着无法获取该锁，将该线程包装为Node，加入到同步等待队列里。
Semaphore用它来表示剩余的许可数量，当许可数量为0时，对未获取到许可但正在努力尝试获取
许可的线程来说，会进入同步等待队列，阻塞，直到一些线程释放掉持有的许可（state+1），然
后争用释放掉的许可。
FutureTask用它来表示任务的状态（未开始、运行中、完成、取消）。
ReentrantReadWriteLock在使用时，稍微有些不同，int型state用二进制表示是32位，前16位
（高位）表示为读锁，后面的16位（低位）表示为写锁。
CountDownLatch使用state表示计数次数，state大于0，表示需要加入到同步等待队列并阻塞，
直到state等于0，才会逐一唤醒等待队列里的线程。
AQS通过内置的FIFO(first-in-first-out)同步队列来控制获取共享资源的线程。CLH队列是FIFO的双端双
向队列，AQS的同步机制就是依靠这个CLH队列完成的。队列的每个节点，都有前驱节点指针和后继节
点指针。如下图：
4.28 LongAdder解决了什么问题，它是如何实现的？
参考答案
高并发下计数，一般最先想到的应该是AtomicLong/AtomicInt，AtmoicXXX使用硬件级别的指令 CAS
来更新计数器的值，这样可以避免加锁，机器直接支持的指令，效率也很高。但是AtomicXXX中的 CAS
操作在出现线程竞争时，失败的线程会白白地循环一次，在并发很大的情况下，因为每次CAS都只有一
个线程能成功，竞争失败的线程会非常多。失败次数越多，循环次数就越多，很多线程的CAS操作越来
越接近 自旋锁（spin lock）。计数操作本来是一个很简单的操作，实际需要耗费的cpu时间应该是越少
越好，AtomicXXX在高并发计数时，大量的cpu时间都浪费会在 自旋 上了，这很浪费，也降低了实际的
计数效率。
LongAdder是jdk8新增的用于并发环境的计数器，目的是为了在高并发情况下，代替
AtomicLong/AtomicInt，成为一个用于高并发情况下的高效的通用计数器。说LongAdder比在高并发
时比AtomicLong更高效，这么说有什么依据呢？LongAdder是根据锁分段来实现的，它里面维护一组
按需分配的计数单元，并发计数时，不同的线程可以在不同的计数单元上进行计数，这样减少了线程竞
争，提高了并发效率。本质上是用空间换时间的思想，不过在实际高并发情况中消耗的空间可以忽略不
计。
现在，在处理高并发计数时，应该优先使用LongAdder，而不是继续使用AtomicLong。当然，线程竞
争很低的情况下进行计数，使用Atomic还是更简单更直接，并且效率稍微高一些。其他情况，比如序号
生成，这种情况下需要准确的数值，全局唯一的AtomicLong才是正确的选择，此时不应该使用
LongAdder。
4.29 介绍下ThreadLocal和它的应用场景
参考答案
ThreadLocal顾名思义是线程私有的局部变量存储容器，可以理解成每个线程都有自己专属的存储容
器，它用来存储线程私有变量，其实它只是一个外壳，内部真正存取是一个Map。每个线程可以通过
set() 和 get() 存取变量，多线程间无法访问各自的局部变量，相当于在每个线程间建立了一个隔
板。只要线程处于活动状态，它所对应的ThreadLocal实例就是可访问的，线程被终止后，它的所有实
例将被垃圾收集。总之记住一句话：ThreadLocal存储的变量属于当前线程。
ThreadLocal经典的使用场景是为每个线程分配一个 JDBC 连接 Connection，这样就可以保证每个线程
的都在各自的 Connection 上进行数据库的操作，不会出现 A 线程关了 B线程正在使用的
Connection。 另外ThreadLocal还经常用于管理Session会话，将Session保存在ThreadLocal中，使线
程处理多次处理会话时始终是同一个Session。
4.30 请介绍ThreadLocal的实现原理，它是怎么处理hash冲突的？
参考答案
Thread类中有个变量threadLocals，它的类型为ThreadLocal中的一个内部类ThreadLocalMap，这个
类没有实现map接口，就是一个普通的Java类，但是实现的类似map的功能。每个线程都有自己的一个
map，map是一个数组的数据结构存储数据，每个元素是一个Entry，entry的key是ThreadLocal的引
用，也就是当前变量的副本，value就是set的值。代码如下所示：
ThreadLocalMap是ThreadLocal的内部类，每个数据用Entry保存，其中的Entry继承与
WeakReference，用一个键值对存储，键为ThreadLocal的引用。为什么是WeakReference呢？如果是
强引用，即使把ThreadLocal设置为null，GC也不会回收，因为ThreadLocalMap对它有强引用。代码
如下所示：
ThreadLocal中的set方法的实现逻辑，先获取当前线程，取出当前线程的ThreadLocalMap，如果不存
在就会创建一个ThreadLocalMap，如果存在就会把当前的threadlocal的引用作为键，传入的参数作为
值存入map中。代码如下所示：
ThreadLocal中get方法的实现逻辑，获取当前线程，取出当前线程的ThreadLocalMap，用当前的
threadlocak作为key在ThreadLocalMap查找，如果存在不为空的Entry，就返回Entry中的value，否则
就会执行初始化并返回默认的值。代码如下所示：
public class Thread implements Runnable {
  /* ThreadLocal values pertaining to this thread. This map is maintained
  * by the ThreadLocal class. */
  ThreadLocal.ThreadLocalMap threadLocals = null;  
}
static class Entry extends WeakReference<ThreadLocal<?>> {
  /** The value associated with this ThreadLocal. */
  Object value;
  Entry(ThreadLocal<?> k, Object v) {
    super(k);
    value = v;
 }
}
public void set(T value) {
  Thread t = Thread.currentThread();
  ThreadLocalMap map = getMap(t);
  if (map != null) {
    map.set(this, value);
 } else {
    createMap(t, value);
 }
}
ThreadLocal中remove方法的实现逻辑，还是先获取当前线程的ThreadLocalMap变量，如果存在就调
用ThreadLocalMap的remove方法。ThreadLocalMap的存储就是数组的实现，因此需要确定元素的位
置，找到Entry，把entry的键值对都设为null，最后也Entry也设置为null。其实这其中会有哈希冲突，
具体见下文。代码如下所示：
ThreadLocal中的hash code非常简单，就是调用AtomicInteger的getAndAdd方法，参数是个固定值
0x61c88647 。上面说过ThreadLocalMap的结构非常简单只用一个数组存储，并没有链表结构，当出
现Hash冲突时采用线性查找的方式，所谓线性查找，就是根据初始key的hashcode值确定元素在table
数组中的位置，如果发现这个位置上已经有其他key值的元素被占用，则利用固定的算法寻找一定步长
的下个位置，依次判断，直至找到能够存放的位置。如果产生多次hash冲突，处理起来就没有
HashMap的效率高，为了避免哈希冲突，使用尽量少的threadlocal变量。
4.31 介绍一下线程池
参考答案
系统启动一个新线程的成本是比较高的，因为它涉及与操作系统交互。在这种情形下，使用线程池可以
很好地提高性能，尤其是当程序中需要创建大量生存期很短暂的线程时，更应该考虑使用线程池。
与数据库连接池类似的是，线程池在系统启动时即创建大量空闲的线程，程序将一个Runnable对象或
Callable对象传给线程池，线程池就会启动一个空闲的线程来执行它们的run()或call()方法，当run()或
call()方法执行结束后，该线程并不会死亡，而是再次返回线程池中成为空闲状态，等待执行下一个
Runnable对象的run()或call()方法。
从Java 5开始，Java内建支持线程池。Java 5新增了一个Executors工厂类来产生线程池，该工厂类包含
如下几个静态工厂方法来创建线程池。创建出来的线程池，都是通过ThreadPoolExecutor类来实现
的。
newCachedThreadPool()：创建一个具有缓存功能的线程池，系统根据需要创建线程，这些线程
将会被缓存在线程池中。
newFixedThreadPool(int nThreads)：创建一个可重用的、具有固定线程数的线程池。
newSingleThreadExecutor()：创建一个只有单线程的线程池，它相当于调用newFixedThread
Pool()方法时传入参数为1。
public T get() {
  Thread t = Thread.currentThread();
  ThreadLocalMap map = getMap(t);
  if (map != null) {
    ThreadLocalMap.Entry e = map.getEntry(this);
    if (e != null) {
      @SuppressWarnings("unchecked")
      T result = (T)e.value;
      return result;
   }
 }
  return setInitialValue();
}
public void remove() {
  ThreadLocalMap m = getMap(Thread.currentThread());
  if (m != null) {
    m.remove(this);
 }
}
newScheduledThreadPool(int corePoolSize)：创建具有指定线程数的线程池，它可以在指定延
迟后执行线程任务。corePoolSize指池中所保存的线程数，即使线程是空闲的也被保存在线程池
内。
newSingleThreadScheduledExecutor()：创建只有一个线程的线程池，它可以在指定延迟后执行
线程任务。
ExecutorService newWorkStealingPool(int parallelism)：创建持有足够的线程的线程池来支持给
定的并行级别，该方法还会使用多个队列来减少竞争。
ExecutorService newWorkStealingPool()：该方法是前一个方法的简化版本。如果当前机器有4个
CPU，则目标并行级别被设置为4，也就是相当于为前一个方法传入4作为参数。
4.32 介绍一下线程池的工作流程
参考答案
线程池的工作流程如下图所示：
1. 判断核心线程池是否已满，没满则创建一个新的工作线程来执行任务。
2. 判断任务队列是否已满，没满则将新提交的任务添加在工作队列。
3. 判断整个线程池是否已满，没满则创建一个新的工作线程来执行任务，已满则执行饱和（拒绝）策
略。
4.33 线程池都有哪些状态？
参考答案
线程池一共有五种状态, 分别是：
1. RUNNING ：能接受新提交的任务，并且也能处理阻塞队列中的任务。
2. SHUTDOWN：关闭状态，不再接受新提交的任务，但却可以继续处理阻塞队列中已保存的任务。
在线程池处于 RUNNING 状态时，调用 shutdown()方法会使线程池进入到该状态。
3. STOP：不能接受新任务，也不处理队列中的任务，会中断正在处理任务的线程。在线程池处于
RUNNING 或 SHUTDOWN 状态时，调用 shutdownNow() 方法会使线程池进入到该状态。
4. TIDYING：如果所有的任务都已终止了，workerCount (有效线程数) 为0，线程池进入该状态后会
调用 terminated() 方法进入TERMINATED 状态。
5. TERMINATED：在terminated() 方法执行完后进入该状态，默认terminated()方法中什么也没有
做。进入TERMINATED的条件如下：
线程池不是RUNNING状态；
线程池状态不是TIDYING状态或TERMINATED状态；
如果线程池状态是SHUTDOWN并且workerQueue为空；
workerCount为0；
设置TIDYING状态成功。
下图为线程池的状态转换过程：
4.34 谈谈线程池的拒绝策略
参考答案
当线程池的任务缓存队列已满并且线程池中的线程数目达到maximumPoolSize，如果还有任务到来就
会采取任务拒绝策略，通常有以下四种策略：
1. AbortPolicy：丢弃任务并抛出RejectedExecutionException异常。
2. DiscardPolicy：也是丢弃任务，但是不抛出异常。
3. DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复该过程）。
4. CallerRunsPolicy：由调用线程处理该任务。
4.35 线程池的队列大小你通常怎么设置？
参考答案
1. CPU密集型任务
尽量使用较小的线程池，一般为CPU核心数+1。 因为CPU密集型任务使得CPU使用率很高，若开
过多的线程数，会造成CPU过度切换。
2. IO密集型任务
可以使用稍大的线程池，一般为2*CPU核心数。 IO密集型任务CPU使用率并不高，因此可以让
CPU在等待IO的时候有其他线程去处理别的任务，充分利用CPU时间。
3. 混合型任务
可以将任务分成IO密集型和CPU密集型任务，然后分别用不同的线程池去处理。 只要分完之后两
个任务的执行时间相差不大，那么就会比串行执行来的高效。因为如果划分之后两个任务执行时间
有数据级的差距，那么拆分没有意义。因为先执行完的任务就要等后执行完的任务，最终的时间仍
然取决于后执行完的任务，而且还要加上任务拆分与合并的开销，得不偿失。
4.36 线程池有哪些参数，各个参数的作用是什么？
参考答案
线程池主要有如下6个参数：
1. corePoolSize（核心工作线程数）：当向线程池提交一个任务时，若线程池已创建的线程数小于
corePoolSize，即便此时存在空闲线程，也会通过创建一个新线程来执行该任务，直到已创建的线
程数大于或等于corePoolSize时。
2. maximumPoolSize（最大线程数）：线程池所允许的最大线程个数。当队列满了，且已创建的线
程数小于maximumPoolSize，则线程池会创建新的线程来执行任务。另外，对于无界队列，可忽
略该参数。
3. keepAliveTime（多余线程存活时间）：当线程池中线程数大于核心线程数时，线程的空闲时间如
果超过线程存活时间，那么这个线程就会被销毁，直到线程池中的线程数小于等于核心线程数。
4. workQueue（队列）：用于传输和保存等待执行任务的阻塞队列。
5. threadFactory（线程创建工厂）：用于创建新线程。threadFactory创建的线程也是采用new
Thread()方式，threadFactory创建的线程名都具有统一的风格：pool-m-thread-n（m为线程池的
编号，n为线程池内的线程编号）。
6. handler（拒绝策略）：当线程池和队列都满了，再加入线程会执行此策略。
