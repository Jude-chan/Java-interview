2. 集合类
2.1 Java中有哪些容器（集合类）？
参考答案
Java中的集合类主要由Collection和Map这两个接口派生而出，其中Collection接口又派生出三个子接
口，分别是Set、List、Queue。所有的Java集合类，都是Set、List、Queue、Map这四个接口的实现
类，这四个接口将集合分成了四大类，其中
Set代表无序的，元素不可重复的集合；
List代表有序的，元素可以重复的集合；
Queue代表先进先出（FIFO）的队列；
Map代表具有映射关系（key-value）的集合。
这些接口拥有众多的实现类，其中最常用的实现类有HashSet、TreeSet、ArrayList、LinkedList、
ArrayDeque、HashMap、TreeMap等。
扩展阅读
Collection体系的继承树：
Map体系的继承树：
注：紫色框体代表接口，其中加粗的是代表四类集合的接口。蓝色框体代表实现类，其中有阴影的是常
用实现类。
2.2 Java中的容器，线程安全和线程不安全的分别有哪些？
参考答案
java.util包下的集合类大部分都是线程不安全的，例如我们常用的HashSet、TreeSet、ArrayList、
LinkedList、ArrayDeque、HashMap、TreeMap，这些都是线程不安全的集合类，但是它们的优点是
性能好。如果需要使用线程安全的集合类，则可以使用Collections工具类提供的synchronizedXxx()方
法，将这些集合类包装成线程安全的集合类。
java.util包下也有线程安全的集合类，例如Vector、Hashtable。这些集合类都是比较古老的API，虽然
实现了线程安全，但是性能很差。所以即便是需要使用线程安全的集合类，也建议将线程不安全的集合
类包装成线程安全集合类的方式，而不是直接使用这些古老的API。
从Java5开始，Java在java.util.concurrent包下提供了大量支持高效并发访问的集合类，它们既能包装
良好的访问性能，有能包装线程安全。这些集合类可以分为两部分，它们的特征如下：
以Concurrent开头的集合类：
以Concurrent开头的集合类代表了支持并发访问的集合，它们可以支持多个线程并发写入访问，
这些写入线程的所有操作都是线程安全的，但读取操作不必锁定。以Concurrent开头的集合类采
用了更复杂的算法来保证永远不会锁住整个集合，因此在并发写入时有较好的性能。
以CopyOnWrite开头的集合类：
以CopyOnWrite开头的集合类采用复制底层数组的方式来实现写操作。当线程对此类集合执行读
取操作时，线程将会直接读取集合本身，无须加锁与阻塞。当线程对此类集合执行写入操作时，集
合会在底层复制一份新的数组，接下来对新的数组执行写入操作。由于对集合的写入操作都是对数
组的副本执行操作，因此它是线程安全的。
扩展阅读
java.util.concurrent包下线程安全的集合类的体系结构：
2.3 Map接口有哪些实现类？
参考答案
Map接口有很多实现类，其中比较常用的有HashMap、LinkedHashMap、TreeMap、
ConcurrentHashMap。
对于不需要排序的场景，优先考虑使用HashMap，因为它是性能最好的Map实现。如果需要保证线程
安全，则可以使用ConcurrentHashMap。它的性能好于Hashtable，因为它在put时采用分段锁/CAS的
加锁机制，而不是像Hashtable那样，无论是put还是get都做同步处理。
对于需要排序的场景，如果需要按插入顺序排序则可以使用LinkedHashMap，如果需要将key按自然顺
序排列甚至是自定义顺序排列，则可以选择TreeMap。如果需要保证线程安全，则可以使用Collections
工具类将上述实现类包装成线程安全的Map。
2.4 描述一下Map put的过程
参考答案
HashMap是最经典的Map实现，下面以它的视角介绍put的过程：
1. 首次扩容：
先判断数组是否为空，若数组为空则进行第一次扩容（resize）；
2. 计算索引：
通过hash算法，计算键值对在数组中的索引；
3. 插入数据：
如果当前位置元素为空，则直接插入数据；
如果当前位置元素非空，且key已存在，则直接覆盖其value；
如果当前位置元素非空，且key不存在，则将数据链到链表末端；
若链表长度达到8，则将链表转换成红黑树，并将数据插入树中；
4. 再次扩容
如果数组中元素个数（size）超过threshold，则再次进行扩容操作。
扩展阅读
HashMap添加数据的详细过程，如下图：
2.5 如何得到一个线程安全的Map？
参考答案
1. 使用Collections工具类，将线程不安全的Map包装成线程安全的Map；
2. 使用java.util.concurrent包下的Map，如ConcurrentHashMap；
3. 不建议使用Hashtable，虽然Hashtable是线程安全的，但是性能较差。
2.6 HashMap有什么特点？
参考答案
1. HashMap是线程不安全的实现；
2. HashMap可以使用null作为key或value。
2.7 JDK7和JDK8中的HashMap有什么区别？
参考答案
JDK7中的HashMap，是基于数组+链表来实现的，它的底层维护一个Entry数组。它会根据计算的
hashCode将对应的KV键值对存储到该数组中，一旦发生hashCode冲突，那么就会将该KV键值对放到
对应的已有元素的后面， 此时便形成了一个链表式的存储结构。
JDK7中HashMap的实现方案有一个明显的缺点，即当Hash冲突严重时，在桶上形成的链表会变得越来
越长，这样在查询时的效率就会越来越低，其时间复杂度为O(N)。
JDK8中的HashMap，是基于数组+链表+红黑树来实现的，它的底层维护一个Node数组。当链表的存
储的数据个数大于等于8的时候，不再采用链表存储，而采用了红黑树存储结构。这么做主要是在查询
的时间复杂度上进行优化，链表为O(N)，而红黑树一直是O(logN)，可以大大的提高查找性能。
2.8 介绍一下HashMap底层的实现原理
参考答案
它基于hash算法，通过put方法和get方法存储和获取对象。
存储对象时，我们将K/V传给put方法时，它调用K的hashCode计算hash从而得到bucket位置，进一步
存储，HashMap会根据当前bucket的占用情况自动调整容量(超过Load Facotr则resize为原来的2倍)。
获取对象时，我们将K传给get，它调用hashCode计算hash从而得到bucket位置，并进一步调用
equals()方法确定键值对。
如果发生碰撞的时候，HashMap通过链表将产生碰撞冲突的元素组织起来。在Java 8中，如果一个
bucket中碰撞冲突的元素超过某个限制(默认是8)，则使用红黑树来替换链表，从而提高速度。
2.9 介绍一下HashMap的扩容机制
参考答案
1. 数组的初始容量为16，而容量是以2的次方扩充的，一是为了提高性能使用足够大的数组，二是为
了能使用位运算代替取模预算(据说提升了5~8倍)。
2. 数组是否需要扩充是通过负载因子判断的，如果当前元素个数为数组容量的0.75时，就会扩充数
组。这个0.75就是默认的负载因子，可由构造器传入。我们也可以设置大于1的负载因子，这样数
组就不会扩充，牺牲性能，节省内存。
3. 为了解决碰撞，数组中的元素是单向链表类型。当链表长度到达一个阈值时（7或8），会将链表
转换成红黑树提高性能。而当链表长度缩小到另一个阈值时（6），又会将红黑树转换回单向链表
提高性能。
4. 对于第三点补充说明，检查链表长度转换成红黑树之前，还会先检测当前数组数组是否到达一个阈
值（64），如果没有到达这个容量，会放弃转换，先去扩充数组。所以上面也说了链表长度的阈
值是7或8，因为会有一次放弃转换的操作。
扩展阅读
例如我们从16扩展为32时，具体的变化如下所示：
因此元素在重新计算hash之后，因为n变为2倍，那么n-1的mask范围在高位多1bit(红色)，因此新的
index就会发生这样的变化：
因此，我们在扩充HashMap的时候，不需要重新计算hash，只需要看看原来的hash值新增的那个bit是
1还是0就好了，是0的话索引没变，是1的话索引变成“原索引+oldCap”。可以看看下图为16扩充为32的
resize示意图：
这个设计确实非常的巧妙，既省去了重新计算hash值的时间，而且同时，由于新增的1bit是0还是1可以
认为是随机的，因此resize的过程，均匀的把之前的冲突的节点分散到新的bucket了。
2.10 HashMap中的循环链表是如何产生的？
参考答案
在多线程的情况下，当重新调整HashMap大小的时候，就会存在条件竞争，因为如果两个线程都发现
HashMap需要重新调整大小了，它们会同时试着调整大小。在调整大小的过程中，存储在链表中的元
素的次序会反过来，因为移动到新的bucket位置的时候，HashMap并不会将元素放在链表的尾部，而
是放在头部，这是为了避免尾部遍历。如果条件竞争发生了，那么就会产生死循环了。
2.11 HashMap为什么用红黑树而不用B树？
参考答案
B/B+树多用于外存上时，B/B+也被成为一个磁盘友好的数据结构。
HashMap本来是数组+链表的形式，链表由于其查找慢的特点，所以需要被查找效率更高的树结构来替
换。如果用B/B+树的话，在数据量不是很多的情况下，数据都会“挤在”一个结点里面，这个时候遍历效
率就退化成了链表。
2.12 HashMap为什么线程不安全？
参考答案
HashMap在并发执行put操作时，可能会导致形成循环链表，从而引起死循环。
2.13 HashMap如何实现线程安全？
参考答案
1. 直接使用Hashtable类；
2. 直接使用ConcurrentHashMap；
3. 使用Collections将HashMap包装成线程安全的Map。
2.14 HashMap是如何解决哈希冲突的？
参考答案
为了解决碰撞，数组中的元素是单向链表类型。当链表长度到达一个阈值时，会将链表转换成红黑树提
高性能。而当链表长度缩小到另一个阈值时，又会将红黑树转换回单向链表提高性能。
2.15 说一说HashMap和HashTable的区别
参考答案
1. Hashtable是一个线程安全的Map实现，但HashMap是线程不安全的实现，所以HashMap比
Hashtable的性能高一点。
2. Hashtable不允许使用null作为key和value，如果试图把null值放进Hashtable中，将会引发空指针
异常，但HashMap可以使用null作为key或value。
扩展阅读
从Hashtable的类名上就可以看出它是一个古老的类，它的命名甚至没有遵守Java的命名规范：每个单
词的首字母都应该大写。也许当初开发Hashtable的工程师也没有注意到这一点，后来大量Java程序中
使用了Hashtable类，所以这个类名也就不能改为HashTable了，否则将导致大量程序需要改写。
与Vector类似的是，尽量少用Hashtable实现类，即使需要创建线程安全的Map实现类，也无须使用
Hashtable实现类，可以通过Collections工具类把HashMap变成线程安全的Map。
2.16 HashMap与ConcurrentHashMap有什么区别？
参考答案
HashMap是非线程安全的，这意味着不应该在多线程中对这些Map进行修改操作，否则会产生数据不
一致的问题，甚至还会因为并发插入元素而导致链表成环，这样在查找时就会发生死循环，影响到整个
应用程序。
Collections工具类可以将一个Map转换成线程安全的实现，其实也就是通过一个包装类，然后把所有功
能都委托给传入的Map，而包装类是基于synchronized关键字来保证线程安全的（Hashtable也是基于
synchronized关键字），底层使用的是互斥锁，性能与吞吐量比较低。
ConcurrentHashMap的实现细节远没有这么简单，因此性能也要高上许多。它没有使用一个全局锁来
锁住自己，而是采用了减少锁粒度的方法，尽量减少因为竞争锁而导致的阻塞与冲突，而且
ConcurrentHashMap的检索操作是不需要锁的。
2.17 介绍一下ConcurrentHashMap是怎么实现的？
参考答案
JDK 1.7中的实现：
在 jdk 1.7 中，ConcurrentHashMap 是由 Segment 数据结构和 HashEntry 数组结构构成，采取分段
锁来保证安全性。Segment 是 ReentrantLock 重入锁，在 ConcurrentHashMap 中扮演锁的角色，
HashEntry 则用于存储键值对数据。一个 ConcurrentHashMap 里包含一个 Segment 数组，一个
Segment 里包含一个 HashEntry 数组，Segment 的结构和 HashMap 类似，是一个数组和链表结构。
JDK 1.8中的实现：
JDK1.8 的实现已经摒弃了 Segment 的概念，而是直接用 Node 数组+链表+红黑树的数据结构来实现，
并发控制使用 Synchronized 和 CAS 来操作，整个看起来就像是优化过且线程安全的 HashMap，虽然
在 JDK1.8 中还能看到 Segment 的数据结构，但是已经简化了属性，只是为了兼容旧版本。
2.18 ConcurrentHashMap是怎么分段分组的？
参考答案
get操作：
Segment的get操作实现非常简单和高效，先经过一次再散列，然后使用这个散列值通过散列运算定位
到 Segment，再通过散列算法定位到元素。get操作的高效之处在于整个get过程都不需要加锁，除非读
到空的值才会加锁重读。原因就是将使用的共享变量定义成  volatile 类型。
put操作：
当执行put操作时，会经历两个步骤：
1. 判断是否需要扩容；
2. 定位到添加元素的位置，将其放入 HashEntry 数组中。
插入过程会进行第一次 key 的 hash 来定位 Segment 的位置，如果该 Segment 还没有初始化，即通过
CAS 操作进行赋值，然后进行第二次 hash 操作，找到相应的 HashEntry 的位置，这里会利用继承过来
的锁的特性，在将数据插入指定的 HashEntry 位置时（尾插法），会通过继承 ReentrantLock 的
tryLock() 方法尝试去获取锁，如果获取成功就直接插入相应的位置，如果已经有线程获取该
Segment的锁，那当前线程会以自旋的方式去继续的调用  tryLock() 方法去获取锁，超过指定次数就
挂起，等待唤醒。
2.19 说一说你对LinkedHashMap的理解
参考答案
LinkedHashMap使用双向链表来维护key-value对的顺序（其实只需要考虑key的顺序），该链表负责
维护Map的迭代顺序，迭代顺序与key-value对的插入顺序保持一致。
LinkedHashMap可以避免对HashMap、Hashtable里的key-value对进行排序（只要插入key-value对
时保持顺序即可），同时又可避免使用TreeMap所增加的成本。
LinkedHashMap需要维护元素的插入顺序，因此性能略低于HashMap的性能。但因为它以链表来维护
内部顺序，所以在迭代访问Map里的全部元素时将有较好的性能。
2.20 请介绍LinkedHashMap的底层原理
参考答案
LinkedHashMap继承于HashMap，它在HashMap的基础上，通过维护一条双向链表，解决了
HashMap不能随时保持遍历顺序和插入顺序一致的问题。在实现上，LinkedHashMap很多方法直接继
承自HashMap，仅为维护双向链表重写了部分方法。
如下图，淡蓝色的箭头表示前驱引用，红色箭头表示后继引用。每当有新的键值对节点插入时，新节点
最终会接在tail引用指向的节点后面。而tail引用则会移动到新的节点上，这样一个双向链表就建立起来
了。
2.21 请介绍TreeMap的底层原理
参考答案
TreeMap基于红黑树（Red-Black tree）实现。映射根据其键的自然顺序进行排序，或者根据创建映射
时提供的 Comparator 进行排序，具体取决于使用的构造方法。TreeMap的基本操作containsKey、
get、put、remove方法，它的时间复杂度是log(N)。
TreeMap包含几个重要的成员变量：root、size、comparator。其中root是红黑树的根节点。它是
Entry类型，Entry是红黑树的节点，它包含了红黑树的6个基本组成：key、value、left、right、parent
和color。Entry节点根据根据Key排序，包含的内容是value。Entry中key比较大小是根据比较器
comparator来进行判断的。size是红黑树的节点个数。
2.22 Map和Set有什么区别？
参考答案
Set代表无序的，元素不可重复的集合；
Map代表具有映射关系（key-value）的集合，其所有的key是一个Set集合，即key无序且不能重复。
2.23 List和Set有什么区别？
参考答案
Set代表无序的，元素不可重复的集合；
List代表有序的，元素可以重复的集合。
2.24 ArrayList和LinkedList有什么区别？
参考答案
1. ArrayList的实现是基于数组，LinkedList的实现是基于双向链表；
2. 对于随机访问ArrayList要优于LinkedList，ArrayList可以根据下标以O(1)时间复杂度对元素进行随
机访问，而LinkedList的每一个元素都依靠地址指针和它后一个元素连接在一起，查找某个元素的
时间复杂度是O(N)；
3. 对于插入和删除操作，LinkedList要优于ArrayList，因为当元素被添加到LinkedList任意位置的时
候，不需要像ArrayList那样重新计算大小或者是更新索引；
4. LinkedList比ArrayList更占内存，因为LinkedList的节点除了存储数据，还存储了两个引用，一个
指向前一个元素，一个指向后一个元素。
2.25 有哪些线程安全的List？
参考答案
1. Vector
Vector是比较古老的API，虽然保证了线程安全，但是由于效率低一般不建议使用。
2. Collections.SynchronizedList
SynchronizedList是Collections的内部类，Collections提供了synchronizedList方法，可以将一个
线程不安全的List包装成线程安全的List，即SynchronizedList。它比Vector有更好的扩展性和兼
容性，但是它所有的方法都带有同步锁，也不是性能最优的List。
3. CopyOnWriteArrayList
CopyOnWriteArrayList是Java 1.5在java.util.concurrent包下增加的类，它采用复制底层数组的方
式来实现写操作。当线程对此类集合执行读取操作时，线程将会直接读取集合本身，无须加锁与阻
塞。当线程对此类集合执行写入操作时，集合会在底层复制一份新的数组，接下来对新的数组执行
写入操作。由于对集合的写入操作都是对数组的副本执行操作，因此它是线程安全的。在所有线程
安全的List中，它是性能最优的方案。
2.26 介绍一下ArrayList的数据结构？
参考答案
ArrayList的底层是用数组来实现的，默认第一次插入元素时创建大小为10的数组，超出限制时会增加
50%的容量，并且数据以  System.arraycopy() 复制到新的数组，因此最好能给出数组大小的预估
值。
按数组下标访问元素的性能很高，这是数组的基本优势。直接在数组末尾加入元素的性能也高，但如果
按下标插入、删除元素，则要用  System.arraycopy() 来移动部分受影响的元素，性能就变差了，这
是基本劣势。
2.27 谈谈CopyOnWriteArrayList的原理
参考答案
  抛异常 特定值 阻塞 超时
插入 add(e) offer(e) put(e) offer(e, time, unit)
移除 remove() poll() take() poll(time, unit)
检查 element() peek()   
CopyOnWriteArrayList是Java并发包里提供的并发类，简单来说它就是一个线程安全且读操作无锁的
ArrayList。正如其名字一样，在写操作时会复制一份新的List，在新的List上完成写操作，然后再将原引
用指向新的List。这样就保证了写操作的线程安全。
CopyOnWriteArrayList允许线程并发访问读操作，这个时候是没有加锁限制的，性能较高。而写操作的
时候，则首先将容器复制一份，然后在新的副本上执行写操作，这个时候写操作是上锁的。结束之后再
将原容器的引用指向新容器。注意，在上锁执行写操作的过程中，如果有需要读操作，会作用在原容器
上。因此上锁的写操作不会影响到并发访问的读操作。
优点：读操作性能很高，因为无需任何同步措施，比较适用于读多写少的并发场景。在遍历传统的
List时，若中途有别的线程对其进行修改，则会抛出ConcurrentModificationException异常。而
CopyOnWriteArrayList由于其"读写分离"的思想，遍历和修改操作分别作用在不同的List容器，所
以在使用迭代器进行遍历时候，也就不会抛出ConcurrentModificationException异常了。
缺点：一是内存占用问题，毕竟每次执行写操作都要将原容器拷贝一份，数据量大时，对内存压力
较大，可能会引起频繁GC。二是无法保证实时性，Vector对于读写操作均加锁同步，可以保证读
和写的强一致性。而CopyOnWriteArrayList由于其实现策略的原因，写和读分别作用在新老不同
容器上，在写操作执行过程中，读不会阻塞但读取到的却是老容器的数据。
2.28 说一说TreeSet和HashSet的区别
参考答案
HashSet、TreeSet中的元素都是不能重复的，并且它们都是线程不安全的，二者的区别是：
1. HashSet中的元素可以是null，但TreeSet中的元素不能是null；
2. HashSet不能保证元素的排列顺序，而TreeSet支持自然排序、定制排序两种排序的方式；
3. HashSet底层是采用哈希表实现的，而TreeSet底层是采用红黑树实现的。
2.29 说一说HashSet的底层结构
参考答案
HashSet是基于HashMap实现的，默认构造函数是构建一个初始容量为16，负载因子为0.75 的
HashMap。它封装了一个 HashMap 对象来存储所有的集合元素，所有放入 HashSet 中的集合元素实
际上由 HashMap 的 key 来保存，而 HashMap 的 value 则存储了一个 PRESENT，它是一个静态的
Object 对象。
2.30 BlockingQueue中有哪些方法，为什么这样设计？
参考答案
为了应对不同的业务场景，BlockingQueue 提供了4 组不同的方法用于插入、移除以及对队列中的元素
进行检查。如果请求的操作不能得到立即执行的话，每组方法的表现是不同的。这些方法如下：
四组不同的行为方式含义如下：
抛异常：如果操作无法立即执行，则抛一个异常；
特定值：如果操作无法立即执行，则返回一个特定的值(一般是 true / false)。
阻塞：如果操作无法立即执行，则该方法调用将会发生阻塞，直到能够执行；
超时：如果操作无法立即执行，则该方法调用将会发生阻塞，直到能够执行。但等待时间不会超过
给定值，并返回一个特定值以告知该操作是否成功(典型的是true / false)。
2.31 BlockingQueue是怎么实现的？
参考答案
BlockingQueue是一个接口，它的实现类有ArrayBlockingQueue、DelayQueue、
LinkedBlockingQueue、PriorityBlockingQueue、SynchronousQueue等。它们的区别主要体现在存
储结构上或对元素操作上的不同，但是对于put与take操作的原理是类似的。下面以
ArrayBlockingQueue为例，来说明BlockingQueue的实现原理。
首先看一下ArrayBlockingQueue的构造函数，它初始化了put和take函数中用到的关键成员变量，这两
个变量的类型分别是ReentrantLock和Condition。ReentrantLock是
AbstractQueuedSynchronizer（AQS）的子类，它的newCondition函数返回的Condition实例，是定
义在AQS类内部的ConditionObject类，该类可以直接调用AQS相关的函数。
put函数会在队列末尾添加元素，如果队列已经满了，无法添加元素的话，就一直阻塞等待到可以加入
为止。函数的源码如下所示。我们会发现put函数使用了wait/notify的机制。与一般生产者-消费者的实
现方式不同，同步队列使用ReentrantLock和Condition相结合的机制，即先获得锁，再等待，而不是
synchronized和wait的机制。
再来看一下消费者调用的take函数，take函数在队列为空时会被阻塞，一直到阻塞队列加入了新的元
素。
public ArrayBlockingQueue(int capacity, boolean fair) {
  if (capacity <= 0)
    throw new IllegalArgumentException();
  this.items = new Object[capacity];
  lock = new ReentrantLock(fair);
  notEmpty = lock.newCondition();
  notFull =  lock.newCondition();
}
public void put(E e) throws InterruptedException {
  checkNotNull(e);
  final ReentrantLock lock = this.lock;
  lock.lockInterruptibly();
  try {
    while (count == items.length)
      notFull.await();
    enqueue(e);
 } finally {
    lock.unlock();
 }
}
扩展阅读
await操作：
我们发现 ArrayBlockingQueue 并没有使用 Object.wait ，而是使用的 Condition.await ，这是为什
么呢？ Condition 对象可以提供和 Object 的 wait 和 notify 一样的行为，但是后者必须先获取
synchronized 这个内置的 monitor 锁才能调用，而 Condition 则必须先获取 ReentrantLock 。这两
种方式在阻塞等待时都会将相应的锁释放掉，但是 Condition 的等待可以中断，这是二者唯一的区
别。
我们先来看一下 Condition 的 await 函数，await函数的流程大致如下图所示。await函数主要有三个
步骤，一是调用 addConditionWaiter 函数，在 condition wait queue 队列中添加一个节点，代表
当前线程在等待一个消息。然后调用 fullyRelease 函数，将持有的锁释放掉，调用的是AQS的函数。
最后一直调用 isOnSyncQueue 函数判断节点是否被转移到 sync queue 队列上，也就是AQS中等待获
取锁的队列。如果没有，则进入阻塞状态，如果已经在队列上，则调用 acquireQueued 函数重新获取
锁。
signal操作：
signal 函数将 condition wait queue 队列中队首的线程节点转移等待获取锁的 sync queue 队列
中。这样的话， await 函数中调用 isOnSyncQueue 函数就会返回true，导致 await 函数进入最后一步
重新获取锁的状态。
我们这里来详细解析一下 condition wait queue 和 sync queue 两个队列的设计原理。 condition
wait queue 是等待消息的队列，因为阻塞队列为空而进入阻塞状态的 take 函数操作就是在等待阻塞队
列不为空的消息。而 sync queue 队列则是等待获取锁的队列，take函数获得了消息，就可以运行了，
但是它还必须等待获取锁之后才能真正进行运行状态。
public E take() throws InterruptedException {
  final ReentrantLock lock = this.lock;
  lock.lockInterruptibly();
  try {
    while (count == 0)
      notEmpty.await();
    return dequeue();
 } finally {
    lock.unlock();
 }
}
signal 函数其实就做了一件事情，就是不断尝试调用 transferForSignal 函数，将 condition wait
queue 队首的一个节点转移到 sync queue 队列中，直到转移成功。因为一次转移成功，就代表这个消
息被成功通知到了等待消息的节点。
signal 函数的示意图如下所示。
2.32 Stream（不是IOStream）有哪些方法？
参考答案
Stream提供了大量的方法进行聚集操作，这些方法既可以是“中间的”，也可以是“末端的”。
中间方法：中间操作允许流保持打开状态，并允许直接调用后续方法。上面程序中的map()方法就
是中间方法。中间方法的返回值是另外一个流。
末端方法：末端方法是对流的最终操作。当对某个Stream执行末端方法后，该流将会被“消耗”且
不再可用。上面程序中的sum()、count()、average()等方法都是末端方法。
除此之外，关于流的方法还有如下两个特征：
有状态的方法：这种方法会给流增加一些新的属性，比如元素的唯一性、元素的最大数量、保证元
素以排序的方式被处理等。有状态的方法往往需要更大的性能开销。
短路方法：短路方法可以尽早结束对流的操作，不必检查所有的元素。
下面简单介绍一下Stream常用的中间方法：
filter(Predicate predicate)：过滤Stream中所有不符合predicate的元素。
mapToXxx(ToXxxFunction mapper)：使用ToXxxFunction对流中的元素执行一对一的转换，该方
法返回的新流中包含了ToXxxFunction转换生成的所有元素。
peek(Consumer action)：依次对每个元素执行一些操作，该方法返回的流与原有流包含相同的元
素。该方法主要用于调试。
distinct()：该方法用于排序流中所有重复的元素（判断元素重复的标准是使用equals()比较返回
true）。这是一个有状态的方法。
sorted()：该方法用于保证流中的元素在后续的访问中处于有序状态。这是一个有状态的方法。
limit(long maxSize)：该方法用于保证对该流的后续访问中最大允许访问的元素个数。这是一个有
状态的、短路方法。
下面简单介绍一下Stream常用的末端方法：
forEach(Consumer action)：遍历流中所有元素，对每个元素执行action。
toArray()：将流中所有元素转换为一个数组。
reduce()：该方法有三个重载的版本，都用于通过某种操作来合并流中的元素。
min()：返回流中所有元素的最小值。
max()：返回流中所有元素的最大值。
count()：返回流中所有元素的数量。
anyMatch(Predicate predicate)：判断流中是否至少包含一个元素符合Predicate条件。
noneMatch(Predicate predicate)：判断流中是否所有元素都不符合Predicate条件。
findFirst()：返回流中的第一个元素。
findAny()：返回流中的任意一个元素。
除此之外，Java 8允许使用流式API来操作集合，Collection接口提供了一个stream()默认方法，该方法
可返回该集合对应的流，接下来即可通过流式API来操作集合元素。由于Stream可以对集合元素进行整
体的聚集操作，因此Stream极大地丰富了集合的功能。
扩展阅读
Java 8新增了Stream、IntStream、LongStream、DoubleStream等流式API，这些API代表多个支持串
行和并行聚集操作的元素。上面4个接口中，Stream是一个通用的流接口，而IntStream、
LongStream、DoubleStream则代表元素类型为int、long、double的流。
Java 8还为上面每个流式API提供了对应的Builder，例如Stream.Builder、IntStream.Builder、
LongStream.Builder、DoubleStream.Builder，开发者可以通过这些Builder来创建对应的流。
独立使用Stream的步骤如下：
1. 使用Stream或XxxStream的builder()类方法创建该Stream对应的Builder。
2. 重复调用Builder的add()方法向该流中添加多个元素。
3. 调用Builder的build()方法获取对应的Stream。
4. 调用Stream的聚集方法。
在上面4个步骤中，第4步可以根据具体需求来调用不同的方法，Stream提供了大量的聚集方法供用户
调用，具体可参考Stream或XxxStream的API文档。对于大部分聚集方法而言，每个Stream只能执行一
次。
